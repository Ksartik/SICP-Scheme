#lang racket
(define (true? p)
  (not (false? p)))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((and? exp) (eval-and (and-seqs exp) env))
        ((or? exp) (eval-or (or-seqs exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((let*? exp) (eval (let*->combination exp) env))
        ((letrec? exp) (eval (letrec->lets exp) env))
        ((application? exp)
         (applye (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (applye proc args)
  (cond ((primitive-procedure? proc)
         (apply-primitive-procedure proc args))
        ((compound-procedure? proc)
         (eval-sequence
          (procedure-body proc)
          (extend-environment
           (procedure-parameters proc)
           args
           (procedure-environment proc))))
        (else
         (error
          "Unknown procedure type -- APPLY" proc))))

(define (list-of-values exps env)
  (if (no-operands? exps)
      '()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))

(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))

(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))

(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env))

(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env))

(define (self-evaluating? exp)
  (if (or (number? exp) (string? exp))
      true
      false))
(define (tagged-list? exp tag)
  (and (pair? exp) (eq? (car exp) tag)))

(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp)
  (cadr exp))
(define (variable? exp)
  (symbol? exp))

(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp)
  (cadr exp))
(define (assignment-value exp)
  (caddr exp))

(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
                   (cddr exp))))
(define (scan-out-defines proc-body)
  (let ((binds '()))
    (define (iter body)
      (if (null? body) '()
          (let ((proc (car body)))
            (if (definition? proc)
                (begin (set! binds (append binds (list (list (definition-variable proc) '*unassigned*))))
                       (cons (list 'set! (definition-variable proc) (definition-value proc)) (iter (cdr body))))
                (cons proc (iter (cdr body)))))))
    (let ((changed-body (iter proc-body)))
      (if (null? binds)
          changed-body
          (make-let binds changed-body)))))

(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (lambda-parameters exp)
  (cadr exp))
(define (lambda-body exp)
  (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (if? exp)
  (tagged-list? exp 'if))
(define (if-predicate exp)
  (cadr exp))
(define (if-consequent exp)
  (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))

(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))

(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))

(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))

(define (make-begin seq) (cons 'begin seq))

(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))

(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (add-clause? clause) (eq? (cadr clause) '=>))
(define (add-clause-test clause) (car clause))
(define (add-clause-recipient clause) (caddr clause))
(define (cond->if exp)
  (define (expand-clauses clauses)
    (if (null? clauses)
        'false
        (let ((first (car clauses))
              (rest (cdr clauses)))
          (if (cond-else-clause? first)
              (if (null? rest)
                  (sequence->exp (cond-actions first))
                  (error "ELSE CLAUSE ISN'T LAST -- COND->IF" clauses))
              (if (add-clause? first)
                  (make-if (add-clause-test first)
                           (cons (add-clause-recipient first) (add-clause-test first))
                           (expand-clauses rest))
                  (make-if (cond-predicate first)
                           (sequence->exp (cond-actions first))
                           (expand-clauses rest)))))))
  (expand-clauses (cond-clauses exp)))

(define (and? exp)
  (tagged-list? exp 'and))
(define (and-seqs exp) (cdr exp))
(define (or? exp)
  (tagged-list? exp 'or))
(define (or-seqs exp) (cdr exp))
(define (eval-and seq env)
  (cond ((null? seq) true)
        ((false? (first-exp seq)) false)
        (else (eval-and (cdr seq) env))))
(define (eval-or seq env)
  (cond ((null? seq) false)
        ((true? (first-exp seq)) true)
        (else (eval-or (cdr seq) env))))

(define (let? exp)
  (tagged-list? exp 'let))
(define (let-vars exp)
  (map (λ(x) (car x)) (cadr exp)))
(define (let-exps exp)
  (map (λ(x) (cadr x)) (cadr exp)))
(define (let-body exp)
  (cddr exp))
(define (named-let? exp)
  (not (pair? (cadr exp))))
(define (named-let-name exp)
  (cadr exp))
(define (named-let-vars exp)
  (map (λ(x) (car x)) (caddr exp)))
(define (named-let-exps exp)
  (map (λ(x) (cadr x)) (caddr exp)))
(define (named-let-body exp)
  (cdddr exp))
(define (let->combination exp)
  (if (named-let? exp)
      (cons (make-lambda (append (named-let-vars exp) (list (named-let-name exp))) (named-let-body exp))
            (append (named-let-exps exp) (list (make-lambda (named-let-vars exp) (named-let-body exp)))))
      (cons (make-lambda (let-vars exp) (let-body exp)) (let-exps exp))))
(define (make-let bindings body)
  (cons 'let (cons bindings body)))

(define (let*? exp)
  (tagged-list? exp 'let*))
(define (let*-bindings exp)
  (cadr exp))
(define (let*-body exp)
  (cddr exp))
(define (let*->nested-lets exp)
  (define (iter binds)
    (if (null? binds)
        (let*-body exp)
        (make-let (list (car binds))
                        (iter (cdr binds)))))
  (iter (let*-bindings exp)))
(define (let*->combination exp)
  (define (iter binds)
    (if (null? binds)
        (let*-body exp)
        (cons (make-lambda (list (caar binds))
                           (iter (cdr binds))) (cdar binds))))
  (iter (let*-bindings exp)))

(define (letrec? exp) (tagged-list? exp 'letrec))
(define (letrec-bindings exp) (cadr exp))
(define (letrec-body exp) (cddr exp))
(define (letrec->lets exp)
  (let ((binds (letrec-bindings exp))
        (body (letrec-body exp)))
    (make-let (map (λ(x) (list (car x) '*unassigned*)) binds) (append (map (λ(x) (list 'set! (car x) (cadr x))) binds) body))))

(define (for? exp)
  (tagged-list? exp 'for))
(define (for-bindings exp)
  (cadr exp))
(define (for-body exp)
  (cddr exp))

(define (make-procedure parameters body env)
  (list 'procedure parameters (scan-out-defines body) env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))


(define (make-environment [frames '()])
  (let ((env frames))
    (define (dispatch m)
      (cond ((eq? m 'get) env)
            ((eq? m 'first-frame) (car env))
            ((eq? m 'rest-frames) (cdr env))
            ((eq? m 'set) (λ(x) (set! env x)))))
    dispatch))
(define (enclosing-environment env) (make-environment (env 'rest-frames))) ;; environment is a list of frames
(define (first-frame env) (car (env 'get)))
(define the-empty-environment (make-environment)) ;; a frame is nothing but a pair of lists --- a list of the variables and a list of corresponding values in the car and cdr respectively
(define (empty-env? env) (eq? (env 'get) '()))
(define (make-frame vars vals)
  (map list vars vals))

(define (add-binding-to-frame! var val frame)
  (set! frame (cons (list var val) frame))
  frame)
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (make-environment (cons (make-frame vars vals) (base-env 'get)))
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-environment env)))
            ((eq? (caar frame) var)
             (if (eq? (cadar frame) '*unassigned*)
                 (error "Value unassigned" var)
                 (cadar frame)))
            (else (scan (cdr frame)))))
    (if (empty-env? env)
        (error "UNBOUND VARIABLE" var)
        (scan (first-frame env))))
  (env-loop env))
(define (set-variable-value! var val env)
  (let ((found false))
    (define (scan frame)
      (if (null? frame)
          '()
          (let ((first-var (caar frame))
                (first-val (cadar frame)))
            (if (eq? var first-var)
                (begin (set! found true) (cons (list var val) (cdr frame)))
                (cons (list first-var first-val) (scan (cdr frame)))))))
    (define (env-loop env)
      (cond (found (env 'get))
            ((empty-env? env) (error "UNBOUND VARIABLE" var))
            (else (cons (scan (first-frame env)) (env-loop (enclosing-environment env))))))
    ((env 'set) (env-loop env))))

(define (define-variable! var val env)
  (let ((frame (first-frame env))
        (found false))
    (define (scan frame)
      (if (null? frame)
          '()
          (let ((first-var (caar frame))
                (first-val (cadar frame)))
            (if (eq? var first-var)
                (begin (set! found true) (cons (list var val) (cdr frame)))
                (cons (list first-var first-val) (scan (cdr frame)))))))
    (let ((s (scan frame)))
      (if found
          ((env 'set) (cons s (env 'rest-frames)))
          ((env 'set) (cons (cons (list var val) s) (env 'rest-frames)))))))

(define (make-unbound! var env)
  (define (scan frame)
    (if (null? frame)
        '()
        (if (eq? var (caar frame))
            (cdr frame)
            (cons (car frame) (scan (cdr frame))))))
  (define (env-loop env)
    (if (empty-env? env)
        '()
        (cons (scan (first-frame env)) (env-loop (enclosing-environment env)))))
  ((env 'set) (env-loop env)))

(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '= =)
        (list 'eq? eq?)
        (list '< <)
        (list '> >)
        (list '>= >=)
        (list '<= <=)
        (list 'equal? equal?)
        (list 'gcd gcd)
        (list 'display display)
        (list 'print print)))
(define (primitive-procedure-names)
  (map car
       primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
(define (apply-primitive-procedure proc args)
  (apply (primitive-implementation proc) args))

(define input-prompt ";; M-Eval input:")
(define output-prompt ";; M-Eval output:")

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))
(define the-global-environment (setup-environment))