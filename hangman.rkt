#lang racket
(define words (list "Australia" "India" "England" "West Indies"))
(define word (list-ref words (random (length words))))
(define (play-hangman Tchances)
  (let ((chances Tchances)
        (already-guessed (list->string (map (Î»(x) (if (eq? x #\space) #\space #\-)) (string->list word))))
        (guessed-alphas ""))
    
    (define (search-and-reduce g w)
      (let ((l (string-length w)))
        (define (iter i)
          (if (>= i l)
              ""
              (let ((wi (string (string-ref w i)))
                    (guessedi (string (string-ref already-guessed i))))
                  (cond ((string=? (string-downcase wi) (string-downcase g)) (string-append wi (iter (+ i 1))))
                        ((not(string=? guessedi "-")) (string-append guessedi (iter (+ i 1))))
                        (else (string-append "-" (iter (+ i 1))))))))
        (iter 0)))
    
    (define (hangman)
      (if (> chances 0)
          (let ((guess (symbol->string (read))))                
                (set! guessed-alphas (string-append guessed-alphas (string-append guess ", ")))
                (let ((guessed (search-and-reduce guess word)))
                  (if(string=? guessed already-guessed)
                     (set! chances (- chances 1))
                     (set! already-guessed guessed)))
                (cond ((string=? already-guessed word)
                       (printf already-guessed)
                       (printf "~nGame Over! You win!"))
                      (else
                       (printf already-guessed)
                       (printf "~nChances left : ~a ~n" chances)
                       (printf "Used Alphabets: ~a ~n~n" guessed-alphas)
                       (hangman))))
          (printf "Game Over! You lose!")))
    (printf "~n ~a ~n~n" already-guessed)
    (hangman)))
            