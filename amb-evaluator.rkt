#lang racket

(define (amb? exp) (tagged-list? exp 'amb))

(define (amb-choices exp) (cdr exp))

(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))

(define (true? p)
  (not (false? p)))

(define (analyze exp)
  (cond ;((amb? exp) (analyze-amb exp))
        ((self-evaluating? exp) (analyze-self-evaluating exp))
        ((variable? exp) (analyze-variable exp))
        ((quoted? exp) (analyze-quoted exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((amb? exp) (analyze-amb exp))
        ((application? exp) (analyze-application exp))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (analyze-self-evaluating exp)
  (λ(env succeed fail)
    (succeed exp fail)))

(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (λ(env succeed fail)
      (succeed qval fail))))

(define (analyze-variable exp)
  (λ(env succeed fail)
    (succeed (lookup-variable-value exp env)
             fail)))

(define (analyze-assignment exp) ;; if vproc fails assignment fails, but if it succeeds and assignment is made only to be later failed, then we need a way to revert it back to its original.
  (let ((var (assignment-variable exp))
        (vproc (analyze (assignment-value exp))))
    (λ(env succeed fail)
      (vproc env
             (λ(val fail2)
               (let ((old-value (lookup-variable-value var env)))
                 (set-variable-value! var val env)
                 (succeed 'ok
                          (lambda()
                            (set-variable-value! var
                                                 old-value
                                                 env)
                            (fail2)))))
             fail))))

(define (analyze-definition exp)
  (let ((var (definition-variable exp))
        (vproc (analyze (definition-value exp))))
    (λ(env succeed fail)
      (vproc env
             (λ(val fail2)
               (define-variable! var val env)
               (succeed 'ok fail2))
             fail))))

(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
    (λ(env succeed fail)
      (pproc env
             (λ(pred-value fail2)
               (if (true? pred-value)
                   (cproc env succeed fail2)
                   (aproc env succeed fail2)))
             fail))))

(define (analyze-lambda exp)
  (let ((vars (analyze (lambda-parameters exp)))
        (bproc (analyze-sequence (lambda-body exp))))
    (λ(env succeed fail)
      (succeed
       (make-procedure vars bproc env)
       fail))))

(define (analyze-sequence exp)
  (define (sequentially proc1 proc2)
    (λ(env succeed fail)
      (proc1 env
             (λ(a-value fail2)
               (proc2 env succeed fail2))
             fail)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
        first-proc
        (loop (sequentially first-proc (car rest-procs))
              (cdr rest-procs))))
  (let ((procs (map analyze exp)))
    (if (null? procs)
        (error "Empty sequence -- ANALYZE")
        (loop (car procs) (cdr procs)))))

(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
        (aprocs (map analyze (operands exp))))
    (λ(env succeed fail)
      (fproc env
             (λ(op fail2)
               (get-args aprocs
                         env
                         (λ(args fail3)
                           (execute-application op args succeed fail3))
                         fail2))
             fail))))

(define (get-args aprocs env succeed fail)
  (if (null? aprocs)
      (succeed '() fail)
      ((car aprocs) env
                    (lambda(arg fail2)
                      (get-args (cdr aprocs)
                                env
                                (lambda(args fail3)
                                  (succeed (cons arg args)
                                           fail3))
                                fail2))
                    fail)))

(define (execute-application proc args succeed fail)
  (cond ((primitive-procedure? proc)
         (succeed (apply-primitive-procedure proc args) fail))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment (procedure-parameters proc)
                              args
                              (procedure-environment proc))
          succeed fail))
        (else
         (error
          "Unknown procedure type -- EXECUTE-APPLICATION" proc))))

(define (analyze-amb exp)
  (let ((cprocs (map analyze (amb-choices exp))))
    (λ(env succeed fail)
      (define (try-next choices)
        (if (null? choices)
            (fail)
            ((car choices) env
                           succeed
                           (lambda()
                             (try-next (cdr choices))))))
      (try-next cprocs))))

(define (self-evaluating? exp)
  (if (or (number? exp) (string? exp))
      true
      false))
(define (tagged-list? exp tag)
  (and (pair? exp) (eq? (car exp) tag)))

(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp)
  (cadr exp))
(define (variable? exp)
  (symbol? exp))

(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp)
  (cadr exp))
(define (assignment-value exp)
  (caddr exp))

(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
                   (cddr exp))))
(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (lambda-parameters exp)
  (cadr exp))
(define (lambda-body exp)
  (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (if? exp)
  (tagged-list? exp 'if))
(define (if-predicate exp)
  (cadr exp))
(define (if-consequent exp)
  (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))

(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))

(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (add-clause? clause) (eq? (cadr clause) '=>))
(define (add-clause-test clause) (car clause))
(define (add-clause-recipient clause) (caddr clause))
(define (cond->if exp)
  (define (expand-clauses clauses)
    (if (null? clauses)
        'false
        (let ((first (car clauses))
              (rest (cdr clauses)))
          (if (cond-else-clause? first)
              (if (null? rest)
                  (sequence->exp (cond-actions first))
                  (error "ELSE CLAUSE ISN'T LAST -- COND->IF" clauses))
              (if (add-clause? first)
                  (make-if (add-clause-test first)
                           (cons (add-clause-recipient first) (add-clause-test first))
                           (expand-clauses rest))
                  (make-if (cond-predicate first)
                           (sequence->exp (cond-actions first))
                           (expand-clauses rest)))))))
  (expand-clauses (cond-clauses exp)))

(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))


(define (make-environment [frames '()])
  (let ((env frames))
    (define (dispatch m)
      (cond ((eq? m 'get) env)
            ((eq? m 'first-frame) (car env))
            ((eq? m 'rest-frames) (cdr env))
            ((eq? m 'set) (λ(x) (set! env x)))))
    dispatch))
(define (enclosing-environment env) (make-environment (env 'rest-frames))) ;; environment is a list of frames
(define (first-frame env) (car (env 'get)))
(define the-empty-environment (make-environment)) ;; a frame is nothing but a pair of lists --- a list of the variables and a list of corresponding values in the car and cdr respectively
(define (empty-env? env) (eq? (env 'get) '()))
(define (make-frame vars vals)
  (map list vars vals))

(define (add-binding-to-frame! var val frame)
  (set! frame (cons (list var val) frame))
  frame)
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (make-environment (cons (make-frame vars vals) (base-env 'get)))
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-environment env)))
            ((eq? (caar frame) var)
             (if (eq? (cadar frame) '*unassigned*)
                 (error "Value unassigned" var)
                 (cadar frame)))
            (else (scan (cdr frame)))))
    (if (empty-env? env)
        (error "UNBOUND VARIABLE" var)
        (scan (first-frame env))))
  (env-loop env))
(define (set-variable-value! var val env)
  (let ((found false))
    (define (scan frame)
      (if (null? frame)
          '()
          (let ((first-var (caar frame))
                (first-val (cadar frame)))
            (if (eq? var first-var)
                (begin (set! found true) (cons (list var val) (cdr frame)))
                (cons (list first-var first-val) (scan (cdr frame)))))))
    (define (env-loop env)
      (cond (found (env 'get))
            ((empty-env? env) (error "UNBOUND VARIABLE" var))
            (else (cons (scan (first-frame env)) (env-loop (enclosing-environment env))))))
    ((env 'set) (env-loop env))))

(define (define-variable! var val env)
  (let ((frame (first-frame env))
        (found false))
    (define (scan frame)
      (if (null? frame)
          '()
          (let ((first-var (caar frame))
                (first-val (cadar frame)))
            (if (eq? var first-var)
                (begin (set! found true) (cons (list var val) (cdr frame)))
                (cons (list first-var first-val) (scan (cdr frame)))))))
    (let ((s (scan frame)))
      (if found
          ((env 'set) (cons s (env 'rest-frames)))
          ((env 'set) (cons (cons (list var val) s) (env 'rest-frames)))))))

(define (make-unbound! var env)
  (define (scan frame)
    (if (null? frame)
        '()
        (if (eq? var (caar frame))
            (cdr frame)
            (cons (car frame) (scan (cdr frame))))))
  (define (env-loop env)
    (if (empty-env? env)
        '()
        (cons (scan (first-frame env)) (env-loop (enclosing-environment env)))))
  ((env 'set) (env-loop env)))

(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '= =)
        (list 'eq? eq?)
        (list '< <)
        (list 'list list)
        (list '> >)
        (list '>= >=)
        (list '<= <=)
        (list 'equal? equal?)
        (list 'gcd gcd)
        (list 'display display)
        (list 'print print)))
(define (primitive-procedure-names)
  (map car
       primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
(define (apply-primitive-procedure proc args)
  (apply (primitive-implementation proc) args))

(define input-prompt ";; Amb-Eval input:")
(define output-prompt ";; Amb-Eval output:")

(define (driver-loop)
  (define (internal-loop try-again)
    (prompt-for-input input-prompt)
    (let ((input (read)))
      (if (eq? input 'try-again)
          (try-again)
          (begin
            (newline)
            (display ";;; Starting a new problem")
            (ambeval input
                     the-global-environment
                     (λ(val next-alternative)
                       (announce-output output-prompt)
                       (user-print val)
                       (internal-loop next-alternative))
                     (λ()
                       (announce-output
                        ";;; There are no more values of")
                       (user-print input)
                       (driver-loop)))))))
  (internal-loop
   (lambda()
     (newline)
     (display ";;; There is no current problem")
     (driver-loop))))

(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))
(define the-global-environment (setup-environment))
